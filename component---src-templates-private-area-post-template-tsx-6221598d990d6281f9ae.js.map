{"version":3,"file":"component---src-templates-private-area-post-template-tsx-6221598d990d6281f9ae.js","mappings":"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","sources":["webpack://adkaora.com/./src/components/Forms/ContactUsForm.tsx","webpack://adkaora.com/./src/components/UI/Reader/Reader.tsx","webpack://adkaora.com/./src/components/UI/TextArea/TextArea.tsx","webpack://adkaora.com/./src/templates/PrivateAreaPostTemplate.tsx"],"sourcesContent":["import {useState} from \"react\"\nimport {SubmitHandler, useForm} from \"react-hook-form\"\nimport Button from \"~/components/UI/Button/Button\"\nimport CheckBox from \"~/components/UI/CheckBox/CheckBox\"\nimport InputText from \"~/components/UI/InputText/InputText\"\nimport TextArea from \"~/components/UI/TextArea/TextArea\"\nimport CheckIcon from \"~/icons/CheckIcon\"\nimport {useLabelsQuery} from \"~/queries/LabelsQuery\"\nimport {classes} from \"~/utilities/classes\"\nimport ErrorIcon from \"../../icons/ErrorIcon\"\nimport {useAuthenticationLabelsQuery} from \"../../queries/AuthenticationLabelsQuery\"\nimport {emailRegex, nameRegex, phoneRegex, textRegex} from \"../../utilities/RegexStrings\"\nimport \"./Form.css\"\n\ninterface ContactUsFormProps extends React.FormHTMLAttributes<HTMLFormElement> {}\n\n// Se il nome dei campi Ã¨ caotico, dipende dalla form.\ntype ContactUsFields = {\n    Name_First: string\n    Name_Last: string\n    Email: string\n    PhoneNumber_countrycode: string\n    MultiLine: string\n    DecisionBox: \"on\" | \"\"\n}\n\ntype SubmitStatus = undefined | \"success\" | \"error\"\n\nconst ContactUsForm: React.VFC<ContactUsFormProps> = props => {\n    const {className, children, ...otherProps} = props\n    const [submitStatus, setSubmitStatus] = useState<SubmitStatus>()\n\n    const {\n        register,\n        handleSubmit,\n        watch,\n        formState: {errors},\n    } = useForm<ContactUsFields>()\n    const labels = {...useLabelsQuery(), ...useAuthenticationLabelsQuery()}\n\n    const onFormSubmitHandler: SubmitHandler<ContactUsFields> = async inputData => {\n        const data = {...inputData, PhoneNumber_countrycode: inputData.PhoneNumber_countrycode.replace(\"+\", \"00\")}\n\n        const url =\n            \"https://forms.zohopublic.eu/adkaora/form/AdKaoranewwebsiteLAVORACONNOI/formperma/0UrFrFIFXXh4TlYIYqqlCXQMMRyLHuAazd6AyGFit14/htmlRecords/submit\"\n\n        const formData = new FormData()\n\n        for (let field in data) {\n            type ObjectKey = keyof typeof data\n            const fieldKey = field as ObjectKey\n            if (typeof data[fieldKey] === \"boolean\") {\n                const bool = data[fieldKey] as unknown as boolean\n                if (bool) {\n                    formData.append(field, \"on\")\n                } else {\n                    formData.append(field, \"\")\n                }\n                continue\n            }\n            formData.append(field, data[fieldKey])\n        }\n\n        const requestOptions: RequestInit = {\n            method: \"POST\",\n            mode: \"cors\",\n            body: formData,\n            redirect: \"manual\",\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n        }\n\n        await fetch(url, requestOptions).catch((error: Error) => {})\n        setSubmitStatus(\"success\")\n    }\n\n    return (\n        <form className={classes(\"form-ykf9\", className)} onSubmit={handleSubmit(onFormSubmitHandler)} {...otherProps}>\n            <h4 className=\"title-ykf9 span2-ykf9\">{labels.contactUs}</h4>\n            <InputText\n                type=\"text\"\n                placeholder={labels.name}\n                invalid={errors.Name_First !== undefined}\n                {...register(\"Name_First\", {required: true, pattern: nameRegex})}\n            />\n            <InputText\n                type=\"text\"\n                placeholder={labels.lastName}\n                invalid={errors.Name_Last !== undefined}\n                {...register(\"Name_Last\", {required: true, pattern: nameRegex})}\n            />\n            <InputText\n                type=\"email\"\n                placeholder={labels.eMail}\n                invalid={errors.Email !== undefined}\n                {...register(\"Email\", {\n                    required: true,\n                    pattern: emailRegex,\n                })}\n            />\n            <div className=\"full-width-ykf9\">\n                <InputText\n                    containerClassName=\"full-width-ykf9 phone-input-ykf9\"\n                    type=\"phone\"\n                    placeholder={labels.phoneNumber}\n                    invalid={errors.PhoneNumber_countrycode !== undefined}\n                    {...register(\"PhoneNumber_countrycode\", {\n                        required: true,\n                        pattern: phoneRegex,\n                    })}\n                />\n                {errors.PhoneNumber_countrycode !== undefined && (\n                    <div className=\"messages-box-pt86\">{labels.validationInvalidPhoneNumber}</div>\n                )}\n            </div>\n            <TextArea\n                placeholder={labels.message}\n                rows={8}\n                className=\"span2-ykf9\"\n                invalid={errors.MultiLine !== undefined}\n                {...register(\"MultiLine\", {required: false, pattern: textRegex})}\n            />\n            <CheckBox\n                label={labels.privacyAcceptance}\n                className=\"span2-ykf9\"\n                invalid={errors.DecisionBox !== undefined}\n                {...register(\"DecisionBox\", {required: true})}\n            />\n            <Button className=\"span2-ykf9 button-ykf9\" type=\"submit\">\n                {labels.submitForm}\n            </Button>\n            {submitStatus === \"success\" && (\n                <div className=\"overlay-ykf9 gray-ykf9\">\n                    <div className=\"modal-ykf9\">\n                        <CheckIcon className=\"check-icon-ykf9\" />\n                        <span className=\"submit-success-message-ykf9\">{labels.submitSuccessMessage}</span>\n                    </div>\n                </div>\n            )}\n            {submitStatus === \"error\" && (\n                <div className=\"overlay-ykf9 gray-ykf9\">\n                    <div className=\"modal-ykf9\">\n                        <ErrorIcon className=\"error-icon-ykf9\" />\n                        <span className=\"submit-success-message-ykf9\">Error</span>\n                    </div>\n                </div>\n            )}\n        </form>\n    )\n}\n\nexport default ContactUsForm\n","import {documentToHtmlString} from \"@contentful/rich-text-html-renderer\"\nimport {HTMLAttributes} from \"react\"\nimport {classes} from \"~/utilities/classes\"\nimport \"./Reader.css\"\n\nexport interface ReaderProps extends Omit<React.HTMLAttributes<HTMLDivElement>, \"children\"> {\n    children?: any | undefined | null\n}\n\nconst Reader: React.FC<ReaderProps> = props => {\n    const {children, className, ...otherPros} = props\n    return (\n        <div\n            className={classes(\"reader-z2vt\", className)}\n            {...(children\n                ? {\n                      dangerouslySetInnerHTML: {\n                          __html: documentToHtmlString(JSON.parse(children)),\n                      },\n                  }\n                : {})}\n            {...otherPros}\n        />\n    )\n}\n\nexport default Reader\n","import {forwardRef} from \"react\"\nimport {classes} from \"~/utilities/classes\"\nimport \"./TextArea.css\"\n\ninterface TextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, \"placeholder\"> {\n    placeholder: string | undefined | null\n    invalid?: boolean\n}\n\nconst TextArea: React.VFC<TextAreaProps> = forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => {\n    const {className, children, placeholder, invalid, ...otherProps} = props\n    return (\n        <textarea\n            ref={ref}\n            className={classes(\"textarea-7t3r\", invalid ? \"invalid-7t3r\" : \"\", className)}\n            placeholder={placeholder ? placeholder : \"\"}\n            {...otherProps}\n        />\n    )\n})\n\nexport default TextArea\n","import {PageProps} from \"gatsby\"\nimport {GatsbySeo} from \"gatsby-plugin-next-seo\"\nimport {Fragment, useContext, useState} from \"react\"\nimport ContactUsForm from \"~/components/Forms/ContactUsForm\"\nimport Blank from \"~/components/Sections/Blank/Blank\"\nimport HeroSection from \"~/components/Sections/HeroSection/HeroSection\"\nimport Search from \"~/components/Sections/Search/Search\"\nimport {ShelfSortCategories} from \"~/components/Sections/Shelf/Shelf\"\nimport Button from \"~/components/UI/Button/Button\"\nimport Gap from \"~/components/UI/Gap/Gap\"\nimport GenericLink from \"~/components/UI/GenericLink/GenericLink\"\nimport InputText from \"~/components/UI/InputText/InputText\"\nimport Reader from \"~/components/UI/Reader/Reader\"\nimport RichTextField from \"~/components/UI/RichText/RichText\"\nimport ScrollButton from \"~/components/UI/ScrollButton/ScrollButton\"\nimport SectionContainer from \"~/components/UI/SectionContainer/SectionContainer\"\nimport Switch from \"~/components/UI/Switch/Switch\"\nimport AuthContext from \"~/contexts/AuthContext\"\nimport I18nContext from \"~/contexts/I18nContext\"\nimport TransitionContext from \"~/contexts/TransitionContext\"\nimport {useAnalysisPostsQuery} from \"~/queries/AnalysisPostsQuery\"\nimport {useAuthenticationLabelsQuery} from \"~/queries/AuthenticationLabelsQuery\"\nimport {useLabelsQuery} from \"~/queries/LabelsQuery\"\nimport {useLinksQuery} from \"~/queries/LinksQuery\"\nimport {useOnDemandPostsQuery} from \"~/queries/OnDemandPostsQuery\"\nimport {usePodcastPostsQuery} from \"~/queries/PodcastPostsQuery\"\nimport {useVideoPostsQuery} from \"~/queries/VideoPostsQuery\"\nimport {PostItem, PostTypes} from \"~/types/PostItem\"\nimport {generateQueryParams} from \"~/utilities/queryParams\"\nimport {\n    PrivateAreaSearchParam,\n    PrivateAreaSectionIndex,\n    PrivateAreaSectionParam,\n    privateAreaSectionsIndexToName,\n} from \"./PrivateAreaTemplate\"\n\nimport \"./MagazinePost.css\"\n\ninterface PrivateAreaPostProps extends PageProps<any, PrivateAreaPostContext> {}\n\nconst PrivateAreaPost: React.FC<PrivateAreaPostProps> = props => {\n    const privateAreaPostData = props.pageContext.data\n    const privateAreaData = props.pageContext.secondaryData\n\n    const i18n = useContext(I18nContext)\n    const labels = {...useLabelsQuery(), ...useAuthenticationLabelsQuery()}\n    const links = useLinksQuery()\n    const privateAreaPosts: Array<PostItem> = []\n    const authContext = useContext(AuthContext)\n    const allPrivateAreaPosts = [\n        ...useAnalysisPostsQuery(),\n        ...useVideoPostsQuery(),\n        ...usePodcastPostsQuery(),\n        ...useOnDemandPostsQuery(),\n    ]\n    allPrivateAreaPosts.forEach(post => {\n        if (post.type !== privateAreaPostData.type) return\n        if (privateAreaPostData.slug === post.slug) return\n        privateAreaPosts.push(post)\n    })\n\n    const [selectedSectionIndex, setSelectedSectionIndex] = useState<PrivateAreaSectionIndex | number>(0)\n    const [inputTextValue, setInputTextValue] = useState(\"\")\n    const [selectedSectionName, setSelectedSectionName] = useState<ShelfSortCategories | string>(\"\")\n    const transitionContenxt = useContext(TransitionContext)\n\n    const onInputChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInputTextValue(event.currentTarget.value)\n    }\n    const onSwitchClickHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const selectedType = Number(event.currentTarget.value)\n        setSelectedSectionIndex(selectedType)\n        setSelectedSectionName(privateAreaSectionsIndexToName(selectedType))\n    }\n    const onFormSubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        const queryParams = generateQueryParams(\n            {name: PrivateAreaSectionParam, value: selectedSectionName},\n            {name: PrivateAreaSearchParam, value: inputTextValue},\n        )\n        const url = `${links.privateArea.url}?${queryParams}`\n        transitionContenxt.navigateTo(url)\n    }\n\n    let formattedDate\n    if (privateAreaPostData.date) {\n        formattedDate = new Intl.DateTimeFormat(i18n.language, {\n            day: \"numeric\",\n            month: \"long\",\n            year: \"numeric\",\n        }).format(new Date(privateAreaPostData.date))\n    }\n\n    let canonicalUrl = \"\"\n    switch (privateAreaPostData.type) {\n        case PostTypes.analysis:\n            canonicalUrl = `${process.env.SITE_URL}${links.analysis.url}/${privateAreaPostData.slug}`\n            break\n        case PostTypes.video:\n            canonicalUrl = `${process.env.SITE_URL}${links.video.url}/${privateAreaPostData.slug}`\n            break\n        case PostTypes.onDemand:\n            canonicalUrl = `${process.env.SITE_URL}${links.onDemand.url}/${privateAreaPostData.slug}`\n            break\n        case PostTypes.podcast:\n            canonicalUrl = `${process.env.SITE_URL}${links.podcast.url}/${privateAreaPostData.slug}`\n            break\n    }\n\n    return (\n        <Fragment>\n            <GatsbySeo\n                title={`${privateAreaPostData.title}`}\n                canonical={canonicalUrl}\n                description={`${privateAreaPostData.description_short}`}\n                language={i18n.language}\n                openGraph={{\n                    url: canonicalUrl,\n                    title: `${privateAreaPostData.title}`,\n                    description: `${privateAreaPostData.description_short}`,\n                    locale: i18n.language,\n                    images: [\n                        {\n                            url: `${privateAreaPostData.image?.url}`,\n                            width: Number(privateAreaPostData.image?.width),\n                            height: Number(privateAreaPostData.image?.height),\n                            alt: `${privateAreaPostData.image?.title}`,\n                        },\n                    ],\n                }}\n            />\n            <HeroSection image={privateAreaPostData.image?.gatsbyImageData} imageAlt={privateAreaPostData.image?.title}>\n                <div>\n                    <h6 className=\"date-9jgh\">{formattedDate}</h6>\n                    <h3 className=\"title-9jgh\">{privateAreaPostData.title}</h3>\n                    <h6 className=\"category-9jgh\">\n                        {`${labels.category}: `}\n                        <GenericLink\n                            className=\"category-value-9jgh\"\n                            to={`${links.privateArea.url}?search=${privateAreaPostData.category}`}\n                        >\n                            {privateAreaPostData.category}\n                        </GenericLink>\n                    </h6>\n                </div>\n            </HeroSection>\n            {authContext.status === \"SIGNED_IN\" && (\n                <Fragment>\n                    <SectionContainer>\n                        <Search title={privateAreaData.titolo} startClosed>\n                            <Gap centered style={{marginTop: \"var(--gutter-4)\"}}>\n                                <Switch\n                                    key={labels.all}\n                                    selected={selectedSectionIndex === PrivateAreaSectionIndex.index}\n                                    onSelect={onSwitchClickHandler}\n                                    value={PrivateAreaSectionIndex.index}\n                                >\n                                    {labels.all}\n                                </Switch>\n                                {privateAreaData.filtri?.map((section, index) => {\n                                    return (\n                                        <Switch\n                                            key={section?.slug}\n                                            selected={selectedSectionIndex === index + 1}\n                                            onSelect={onSwitchClickHandler}\n                                            value={index + 1}\n                                        >\n                                            {section?.titolo}\n                                        </Switch>\n                                    )\n                                })}\n                            </Gap>\n                            <form onSubmit={onFormSubmitHandler}>\n                                <Gap centered>\n                                    <InputText\n                                        placeholder={labels.searchInputPlaceholder}\n                                        onChange={onInputChangeValue}\n                                        value={inputTextValue}\n                                        style={{\n                                            width: \"min(30vw,500px)\",\n                                            minWidth: \"240px\",\n                                            fontStyle: \"italic\",\n                                        }}\n                                    />\n                                    <Button color=\"green\" type=\"submit\">\n                                        {labels.search}\n                                    </Button>\n                                </Gap>\n                            </form>\n                        </Search>\n                    </SectionContainer>\n                    <SectionContainer>\n                        <Blank>\n                            <Reader>{privateAreaPostData.content?.raw}</Reader>\n                        </Blank>\n                    </SectionContainer>\n                    <SectionContainer className=\"contact-us-section-9jgh\">\n                        <ContactUsForm />\n                    </SectionContainer>\n                    {/* <SectionContainer>\n                        <Shelf show={2} label={labels.more}>\n                            {privateAreaPosts.map((item, index) => {\n                                return (\n                                    <Post\n                                        key={index}\n                                        date={item.date}\n                                        title={item.title}\n                                        image={item.image}\n                                        category={item.category}\n                                        tags={item.tags}\n                                        description_short={item.description_short}\n                                        slug={item.slug}\n                                        type={item.type}\n                                        customer={item.customer}\n                                        project={item.project}\n                                    />\n                                )\n                            })}\n                        </Shelf>\n                    </SectionContainer> */}\n                </Fragment>\n            )}\n            {authContext.status !== \"SIGNED_IN\" && (\n                <Fragment>\n                    <SectionContainer tabbed marginPost customTab={<ScrollButton />}>\n                        <Blank>\n                            <RichTextField>{labels.accountRequired?.raw}</RichTextField>\n                        </Blank>\n                        <div className=\"switch-container-8hxd\">\n                            <span className=\"switch-label-8hxd\">\n                                {`${labels.missingAccount} `}\n                                <GenericLink\n                                    onClick={() => authContext.setStatus(\"SIGN_UP\")}\n                                    to={links.authentication.url}\n                                >\n                                    {labels.clickHereLinkLabel}\n                                </GenericLink>\n                            </span>\n                        </div>\n                    </SectionContainer>\n                </Fragment>\n            )}\n        </Fragment>\n    )\n}\n\nexport default PrivateAreaPost\n\ninterface PrivateAreaPostContext {\n    data: {\n        customer?: string | null\n        description_short?: string | null\n        id: string\n        type?: string | null\n        title?: string | null\n        slug?: string | null\n        project?: string | null\n        node_locale: string\n        category?: string | null\n        date?: any | null\n        image?: {\n            title?: string | null\n            url?: string | null\n            width?: number | null\n            height?: number | null\n            gatsbyImageData?: any | null\n        } | null\n        pdf?: {url?: string | null; title?: string | null} | null\n        content?: {raw?: string | null} | null\n    }\n    secondaryData: {\n        id: string\n        slug?: string | null\n        titolo?: string | null\n        node_locale: string\n        filtri?: Array<{titolo?: string | null; slug?: string | null; node_locale: string} | null> | null\n    }\n}\n"],"names":["props","className","children","otherProps","submitStatus","setSubmitStatus","useState","register","handleSubmit","watch","formState","errors","useForm","labels","useLabelsQuery","useAuthenticationLabelsQuery","_jsxs","classes","onSubmit","async","data","inputData","PhoneNumber_countrycode","replace","formData","FormData","field","fieldKey","append","requestOptions","method","mode","body","redirect","cache","credentials","fetch","catch","error","_jsx","contactUs","InputText","type","placeholder","name","invalid","undefined","Name_First","required","pattern","nameRegex","lastName","Name_Last","eMail","Email","emailRegex","containerClassName","phoneNumber","phoneRegex","validationInvalidPhoneNumber","TextArea","message","rows","MultiLine","textRegex","CheckBox","label","privacyAcceptance","DecisionBox","Button","submitForm","CheckIcon","submitSuccessMessage","ErrorIcon","otherPros","dangerouslySetInnerHTML","__html","documentToHtmlString","JSON","parse","forwardRef","ref","privateAreaPostData","pageContext","privateAreaData","secondaryData","i18n","useContext","I18nContext","links","useLinksQuery","privateAreaPosts","authContext","AuthContext","useAnalysisPostsQuery","useVideoPostsQuery","usePodcastPostsQuery","useOnDemandPostsQuery","forEach","post","slug","push","selectedSectionIndex","setSelectedSectionIndex","inputTextValue","setInputTextValue","selectedSectionName","setSelectedSectionName","transitionContenxt","TransitionContext","onSwitchClickHandler","event","selectedType","Number","currentTarget","value","privateAreaSectionsIndexToName","formattedDate","date","Intl","DateTimeFormat","language","day","month","year","format","Date","canonicalUrl","PostTypes","analysis","url","video","onDemand","podcast","Fragment","GatsbySeo","title","canonical","description","description_short","openGraph","locale","images","image","_privateAreaPostData$","width","_privateAreaPostData$2","height","_privateAreaPostData$3","alt","_privateAreaPostData$4","HeroSection","_privateAreaPostData$5","gatsbyImageData","imageAlt","_privateAreaPostData$6","category","GenericLink","to","privateArea","status","SectionContainer","Search","titolo","startClosed","Gap","centered","style","marginTop","Switch","selected","PrivateAreaSectionIndex","onSelect","all","filtri","_privateAreaData$filt","map","section","index","preventDefault","queryParams","generateQueryParams","PrivateAreaSectionParam","PrivateAreaSearchParam","navigateTo","searchInputPlaceholder","onChange","minWidth","fontStyle","color","search","Blank","Reader","content","_privateAreaPostData$7","raw","ContactUsForm","tabbed","marginPost","customTab","ScrollButton","RichTextField","accountRequired","_labels$accountRequir","missingAccount","onClick","setStatus","authentication","clickHereLinkLabel"],"sourceRoot":""}