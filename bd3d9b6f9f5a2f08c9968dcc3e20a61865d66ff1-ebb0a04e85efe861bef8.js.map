{"version":3,"file":"bd3d9b6f9f5a2f08c9968dcc3e20a61865d66ff1-ebb0a04e85efe861bef8.js","mappings":"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","sources":["webpack://adkaora.com/./src/components/Sections/Blank/Blank.tsx","webpack://adkaora.com/./src/components/Sections/Search/Search.tsx","webpack://adkaora.com/./src/components/Sections/Shelf/Post.tsx","webpack://adkaora.com/./src/components/Sections/Shelf/Shelf.tsx","webpack://adkaora.com/./src/components/UI/Drawer/Drawer.tsx","webpack://adkaora.com/./src/components/UI/Accordion/Accordion.tsx","webpack://adkaora.com/./src/components/UI/Button/LinkButton.tsx","webpack://adkaora.com/./src/components/UI/Gap/Gap.tsx","webpack://adkaora.com/./src/components/UI/RichText/RichText.tsx","webpack://adkaora.com/./src/components/UI/ScrollButton/ScrollButton.tsx","webpack://adkaora.com/./src/components/UI/Select/Select.tsx","webpack://adkaora.com/./src/components/UI/Switch/Switch.tsx","webpack://adkaora.com/./src/queries/AnalysisPostsQuery.tsx","webpack://adkaora.com/./src/queries/AuthenticationLabelsQuery.tsx","webpack://adkaora.com/./src/queries/OnDemandPostsQuery.tsx","webpack://adkaora.com/./src/queries/PodcastPostsQuery.tsx","webpack://adkaora.com/./src/queries/VideoPostsQuery.tsx","webpack://adkaora.com/./src/templates/PrivateAreaTemplate.tsx","webpack://adkaora.com/./src/utilities/queryParams.ts","webpack://adkaora.com/./src/utilities/transition.ts"],"sourcesContent":["import clsx from \"clsx\"\nimport React from \"react\"\nimport \"./Blank.css\"\n\ninterface BlankProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst Blank: React.FC<BlankProps> = props => {\n    const {className, children, ...otherProps} = props\n    return (\n        <div className={clsx(\"blank-x5d9\", className)} {...otherProps}>\n            {children}\n        </div>\n    )\n}\n\nexport default Blank\n","import clsx from \"clsx\"\nimport Accordion, {AccordionProps} from \"../../UI/Accordion/Accordion\"\nimport \"./Search.css\"\n\ninterface SearchProps extends AccordionProps {}\n\nconst Search: React.FC<SearchProps> = props => {\n    const {className, ...otherProps} = props\n\n    return (\n        <Accordion\n            className={clsx(\"search-k5ec\", className)}\n            titleClassName=\"title-k5ec\"\n            iconClassName=\"icon-k5ec\"\n            {...otherProps}\n        />\n    )\n}\n\nexport default Search\n","import clsx from \"clsx\"\nimport {GatsbyImage} from \"gatsby-plugin-image\"\nimport React, {useContext} from \"react\"\nimport GenericLink from \"~/components/UI/GenericLink/GenericLink\"\nimport I18nContext from \"~/contexts/I18nContext\"\nimport {useLabelsQuery} from \"~/queries/LabelsQuery\"\nimport {PostItem, PostTypes} from \"~/types/PostItem\"\nimport LinkButton from \"../../UI/Button/LinkButton\"\n\nimport \"./Post.css\"\n\nexport interface PostProps extends Omit<React.HTMLAttributes<HTMLDivElement>, \"title\"> {}\n\ntype PostStyle = 1 | 2 | 3 | 4\n\nconst Post: React.FC<PostProps & PostItem> = props => {\n    const {\n        date,\n        image,\n        title,\n        category,\n        tags,\n        description_short,\n        pdf,\n        slug,\n        customer,\n        project,\n        className,\n        children,\n        type,\n        ...otherProps\n    } = props\n    const labels = useLabelsQuery()\n    const i18n = useContext(I18nContext)\n\n    let formattedDate\n    if (date) {\n        formattedDate = new Intl.DateTimeFormat(i18n.language, {\n            day: \"numeric\",\n            month: \"long\",\n            year: \"numeric\",\n        }).format(new Date(date))\n    }\n\n    let postStyle: PostStyle = 1\n\n    switch (type) {\n        case PostTypes.blog:\n            postStyle = 1\n            break\n        case PostTypes.caseHistory:\n            postStyle = 2\n            break\n        case PostTypes.academy:\n            postStyle = 1\n            break\n        case PostTypes.events:\n            postStyle = 1\n            break\n        case PostTypes.analysis:\n            if (pdf) {\n                postStyle = 4\n            } else {\n                postStyle = 3\n            }\n            break\n        case PostTypes.video:\n            if (pdf) {\n                postStyle = 4\n            } else {\n                postStyle = 3\n            }\n            break\n        case PostTypes.onDemand:\n            if (pdf) {\n                postStyle = 4\n            } else {\n                postStyle = 3\n            }\n            break\n        case PostTypes.podcast:\n            if (pdf) {\n                postStyle = 4\n            } else {\n                postStyle = 3\n            }\n            break\n    }\n\n    return (\n        <div className={clsx(\"post-n3j4\", className)} {...otherProps}>\n            <GenericLink {...(pdf ? {to: pdf?.url} : {to: `/${i18n.language}/${type}/${slug}/`})} className=\"left-n3j4\">\n                {image?.gatsbyImageData && image.title && (\n                    <GatsbyImage alt={image.title} image={image?.gatsbyImageData} className=\"image-n3j4\" />\n                )}\n                {(postStyle === 1 || postStyle === 2) && (\n                    <div className=\"overlay-n3j4\">\n                        {formattedDate && postStyle === 1 && <span className=\"date-n3j4\">{formattedDate}</span>}\n                        {postStyle === 1 && <h5 className=\"title-n3j4\">{title}</h5>}\n                        {postStyle !== 1 && <h4 className=\"title-n3j4\">{title}</h4>}\n                    </div>\n                )}\n            </GenericLink>\n            <div className=\"right-n3j4\">\n                <div className=\"lip-n3j4\" />\n                {(postStyle === 3 || postStyle === 4) && <div className=\"text-n3j4\">{title}</div>}\n                {postStyle === 1 && (\n                    <div className=\"text-n3j4\">\n                        {`${labels.category}: `}\n                        <span className=\"green-n3j4\">{category}</span>\n                    </div>\n                )}\n                {postStyle === 1 && (\n                    <div className=\"text-n3j4\">\n                        {`${labels.tag}: `}\n                        <span className=\"green-n3j4\">{tags?.join(\", \")}</span>\n                    </div>\n                )}\n                {postStyle === 2 && (\n                    <div className=\"text-n3j4\">\n                        {`${labels.customer}: `}\n                        <span className=\"green-n3j4\">{customer}</span>\n                    </div>\n                )}\n                {postStyle === 2 && (\n                    <div className=\"text-n3j4\">\n                        {`${labels.project}: `}\n                        <span className=\"green-n3j4\">{project}</span>\n                    </div>\n                )}\n                <div className=\"text-n3j4\">{description_short}</div>\n                <div className=\"cta-n3j4\">\n                    {postStyle !== 4 && (\n                        <LinkButton to={`/${i18n.language}/${type}/${slug}/`}>{labels.read}</LinkButton>\n                    )}\n                    {postStyle === 4 && (\n                        <LinkButton to={pdf?.url} download>\n                            {labels.downloadPdf}\n                        </LinkButton>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Post\n","import clsx from \"clsx\"\nimport {Children, Fragment, useEffect, useRef, useState} from \"react\"\nimport Button from \"~/components/UI/Button/Button\"\nimport Select, {Option} from \"~/components/UI/Select/Select\"\nimport ChevronDownIcon from \"~/icons/ChevronDownIcon\"\nimport {useLabelsQuery} from \"~/queries/LabelsQuery\"\nimport {PostItem} from \"~/types/PostItem\"\nimport {PostProps} from \"./Post\"\nimport \"./Shelf.css\"\n\ninterface ShelfProps extends React.HTMLAttributes<HTMLDivElement> {\n    label?: string | undefined | null\n    withSorting?: boolean | undefined\n    withShowMore?: boolean | undefined\n    show?: number | undefined\n    loading?: boolean | undefined\n    sortyBy?: ShelfSortCategories | string | undefined | null\n    onSortSelect?: ((value: ShelfSortCategories | string) => void) | undefined | null\n}\n\nconst Shelf: React.FC<ShelfProps> = props => {\n    const {\n        className,\n        title,\n        loading,\n        label,\n        withSorting = false,\n        withShowMore = false,\n        sortyBy: sort,\n        onSortSelect,\n        show = 5,\n        children,\n        ...otherProps\n    } = props\n    const [showing, setShowing] = useState(show)\n    const [sortBy, setSortBy] = useState<ShelfSortCategories | string>(sort ? sort : ShelfSortCategories.DateC)\n    const [items, setItems] = useState<Array<React.ReactElement<PostProps>>>()\n    const [isLoading, setLoading] = useState<boolean>(false)\n    const timeoutRef = useRef<NodeJS.Timeout | undefined>()\n    const labels = useLabelsQuery()\n\n    const onSelectChangeHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSortBy(event.currentTarget.value)\n        if (onSortSelect) onSortSelect(event.currentTarget.value)\n    }\n\n    const updateItems = async () => {\n        const itemsToShow: Array<React.ReactElement<PostProps & PostItem>> = Children.toArray(children) as Array<\n            React.ReactElement<PostProps>\n        >\n\n        switch (sortBy) {\n            case ShelfSortCategories.CategoryC:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.category) return 1\n                    if (!b.props.category) return -1\n                    return a.props.category.localeCompare(b.props.category)\n                })\n                break\n            case ShelfSortCategories.CategoryD:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.category) return -1\n                    if (!b.props.category) return 1\n                    return b.props.category.localeCompare(a.props.category)\n                })\n                break\n            case ShelfSortCategories.CustomerC:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.customer) return 1\n                    if (!b.props.customer) return -1\n                    return a.props.customer.localeCompare(b.props.customer)\n                })\n                break\n            case ShelfSortCategories.CustomerD:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.customer) return -1\n                    if (!b.props.customer) return 1\n                    return b.props.customer.localeCompare(a.props.customer)\n                })\n                break\n            case ShelfSortCategories.DateC:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.date) return 1\n                    if (!b.props.date) return -1\n                    if (a.props.date > b.props.date) return -1\n                    if (b.props.date > a.props.date) return 1\n                    return 0\n                })\n                break\n            case ShelfSortCategories.DateD:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.date) return -1\n                    if (!b.props.date) return 1\n                    if (a.props.date > b.props.date) return 1\n                    if (b.props.date > a.props.date) return -1\n                    return 0\n                })\n                break\n            case ShelfSortCategories.TitleC:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.title) return 1\n                    if (!b.props.title) return -1\n                    return a.props.title.localeCompare(b.props.title)\n                })\n                break\n            case ShelfSortCategories.TitleD:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.title) return -1\n                    if (!b.props.title) return 1\n                    return b.props.title.localeCompare(a.props.title)\n                })\n                break\n            case ShelfSortCategories.TypeC:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.type) return 1\n                    if (!b.props.type) return -1\n                    return a.props.type.localeCompare(b.props.type)\n                })\n                break\n            case ShelfSortCategories.TypeD:\n                itemsToShow.sort((a, b) => {\n                    if (!a.props.type) return -1\n                    if (!b.props.type) return 1\n                    return b.props.type.localeCompare(a.props.type)\n                })\n                break\n        }\n\n        setItems(itemsToShow.slice(0, showing))\n    }\n\n    useEffect(() => {\n        setShowing(show)\n        if (loading || sortBy) {\n            setLoading(true)\n            updateItems().then(result => (timeoutRef.current = setTimeout(() => setLoading(false), 0)))\n        }\n        return () => {\n            if (timeoutRef.current) clearTimeout(timeoutRef.current)\n        }\n    }, [loading, sortBy])\n\n    useEffect(() => {\n        updateItems()\n    }, [showing])\n\n    const onShowMoreClickHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setShowing(state => state + show)\n    }\n\n    return (\n        <div className={clsx(\"shelf-ym83\", className)} {...otherProps}>\n            {(withSorting || label) && (\n                <header className=\"header-ym83\">\n                    <span className=\"label-ym83\">{label}</span>\n                    {withSorting && (\n                        <span className=\"sort-ym83\">\n                            <label className=\"sort-label-ym83\" htmlFor=\"select-ym83\">\n                                {labels.sortBy}\n                            </label>\n\n                            {labels.ascending &&\n                                labels.descending &&\n                                labels.category &&\n                                labels.customer &&\n                                labels.date &&\n                                labels.title &&\n                                labels.type && (\n                                    <Select\n                                        id=\"select-ym83\"\n                                        className=\"select-ym83\"\n                                        value={sortBy}\n                                        onChange={onSelectChangeHandler}\n                                    >\n                                        <Option value={ShelfSortCategories.CategoryC}>\n                                            {`${labels.category} ${labels.ascending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.CategoryD}>\n                                            {`${labels.category} ${labels.descending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.CustomerC}>\n                                            {`${labels.customer} ${labels.ascending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.CustomerD}>\n                                            {`${labels.customer} ${labels.descending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.DateC}>\n                                            {`${labels.date} ${labels.ascending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.DateD}>\n                                            {`${labels.date} ${labels.descending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.TitleC}>\n                                            {`${labels.title} ${labels.ascending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.TitleD}>\n                                            {`${labels.title} ${labels.descending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.TypeC}>\n                                            {`${labels.type} ${labels.ascending}`}\n                                        </Option>\n                                        <Option value={ShelfSortCategories.TypeD}>\n                                            {`${labels.type} ${labels.descending}`}\n                                        </Option>\n                                    </Select>\n                                )}\n                        </span>\n                    )}\n                </header>\n            )}\n            {items && (\n                <Fragment>\n                    {items.length > 0 && <div className=\"items-ym83\">{items}</div>}\n                    {items.length < 1 && (\n                        <div className=\"no-result-ym83\">\n                            <p>{labels.noMatchingResult}</p>\n                        </div>\n                    )}\n                </Fragment>\n            )}\n\n            {withShowMore && showing < Children.count(children) && (\n                <footer className=\"shelf-footer-ym83\">\n                    <Button\n                        className=\"show-more-button-ym83\"\n                        onClick={onShowMoreClickHandler}\n                        type=\"button\"\n                        color=\"transparent\"\n                    >\n                        <ChevronDownIcon className=\"show-more-icon-ym83\" />\n                        <span className=\"show-more-text-ym83\">{labels.showMore}</span>\n                    </Button>\n                </footer>\n            )}\n        </div>\n    )\n}\n\nexport default Shelf\n\nexport enum ShelfSortCategories {\n    CategoryC = \"categoryC\",\n    CategoryD = \"categoryD\",\n    CustomerC = \"customerC\",\n    CustomerD = \"customerD\",\n    DateC = \"dateC\",\n    DateD = \"dateD\",\n    TitleC = \"titleC\",\n    TitleD = \"titleD\",\n    TypeC = \"typeC\",\n    TypeD = \"typeD\",\n}\n","import {AllHTMLAttributes, CSSProperties, ElementType, FC, useCallback, useEffect, useRef, useState} from \"react\"\nimport {onTrasitionEnd} from \"~/utilities/transition\"\n\ntype DrawerProps = AllHTMLAttributes<HTMLElement> & {\n    closed: boolean\n    as?: ElementType\n}\n\nconst defaultStyle: React.CSSProperties = {\n    overflow: \"hidden\",\n    transitionDuration: \"0.5s\",\n    transitionTimingFunction: \"cubic-bezier(0.645, 0.045, 0.355, 1)\",\n}\n\nconst Drawer: FC<DrawerProps> = props => {\n    const {children, closed: _closed, as: Component = \"div\", style, ...otherProps} = props\n    const drawerRef = useRef<HTMLElement>(null)\n    const [isClosed, setClosed] = useState(_closed)\n    const [transitionStyle, setTransitionStyle] = useState<CSSProperties>(_closed ? {display: \"none\"} : {})\n\n    const collapse = useCallback(() => {\n        if (!drawerRef.current) return\n        setTransitionStyle({height: drawerRef.current?.scrollHeight + \"px\"})\n        setTimeout(() => {\n            onTrasitionEnd(drawerRef.current, () => {\n                setTransitionStyle({display: \"none\"})\n                setClosed(true)\n            })\n            setTransitionStyle({height: \"0px\"})\n        }, 20)\n    }, [])\n\n    const expand = useCallback(() => {\n        if (!drawerRef.current) return\n        setTransitionStyle({height: \"0px\"})\n        setTimeout(() => {\n            onTrasitionEnd(drawerRef.current, () => {\n                setTransitionStyle({})\n                setClosed(false)\n            })\n            if (!drawerRef.current) return\n            setTransitionStyle({height: drawerRef.current.scrollHeight + \"px\"})\n        }, 20)\n    }, [])\n\n    useEffect(() => {\n        if (!drawerRef.current) return\n        if (_closed && !isClosed) {\n            collapse()\n        }\n        if (!_closed && isClosed) {\n            expand()\n        }\n    }, [_closed, isClosed, expand, collapse])\n\n    return (\n        <Component style={{...defaultStyle, ...transitionStyle}} ref={drawerRef} {...otherProps}>\n            {children}\n        </Component>\n    )\n}\n\nexport default Drawer\n","import clsx from \"clsx\"\nimport {useState} from \"react\"\nimport Drawer from \"~/components/UI/Drawer/Drawer\"\nimport ChevronUpIcon from \"~/icons/ChevronUpIcon\"\nimport \"./Accordion.css\"\n\nexport interface AccordionProps extends Omit<React.HTMLAttributes<HTMLDivElement>, \"title\"> {\n    title?: string | null | undefined\n    startClosed?: boolean | undefined\n    titleClassName?: string | undefined\n    iconClassName?: string | undefined\n}\n\nconst Accordion: React.FC<AccordionProps> = props => {\n    const {className, titleClassName, iconClassName, title, startClosed = false, children, ...otherProps} = props\n    const [closed, setClosed] = useState(startClosed)\n\n    return (\n        <div className={clsx(\"accordion-90d3\", closed ? \"closed-90d3\" : \"\", className)} {...otherProps}>\n            <button className=\"button-90d3\" onClick={e => setClosed(state => !state)}>\n                <ChevronUpIcon className={clsx(\"icon-90d3 \", iconClassName)} />\n                <span className={clsx(titleClassName, \"\")}>{title}</span>\n            </button>\n            <Drawer closed={closed} className=\"content-90d3\">\n                {children}\n            </Drawer>\n        </div>\n    )\n}\n\nexport default Accordion\n","import {Link, LinkProps} from \"@gatsbyjs/reach-router\"\nimport {navigate} from \"@reach/router\"\nimport clsx from \"clsx\"\nimport {withPrefix} from \"gatsby\"\nimport React, {useContext} from \"react\"\nimport Ripple, {RippleColor} from \"~/components/UI/Ripple/Ripple\"\nimport TransitionContext from \"~/contexts/TransitionContext\"\nimport NavBarContext from \"../../../contexts/NavBarContext\"\nimport {ButtonColor} from \"./Button\"\n\nimport \"./Button.css\"\n\nexport interface LinkButtonProps extends Omit<LinkProps<any>, \"to\"> {\n    color?: ButtonColor\n    withoutTransition?: boolean | undefined\n    to?: string | undefined | null\n}\n\nconst LinkButton: React.FC<LinkButtonProps> = props => {\n    const {\n        color = \"green\",\n        to = \"\",\n        children,\n        download,\n        withoutTransition,\n        onClick,\n        className,\n        ref,\n        ...otherProps\n    } = props\n    const internal = /^\\/(?!\\/)/.test(to ? to : \"\")\n    const transitionContenxt = useContext(TransitionContext)\n    const navbarContext = useContext(NavBarContext)\n\n    let rippleColor: RippleColor = \"light-green\"\n    switch (color) {\n        case \"green\":\n            rippleColor = \"light-green\"\n            break\n        case \"white\":\n            rippleColor = \"green\"\n            break\n        case \"blue\":\n            rippleColor = \"blue\"\n            break\n        case \"gray\":\n            rippleColor = \"gray\"\n            break\n        case \"red\":\n            rippleColor = \"red\"\n            break\n    }\n\n    const goTo = (url: string) => {\n        if (!url) return\n        if (withoutTransition) {\n            navigate(url)\n            return\n        }\n        transitionContenxt.navigateTo(url)\n    }\n\n    const onClickHandler = (event: React.MouseEvent<HTMLAnchorElement>) => {\n        event.preventDefault()\n        navbarContext.hide(1000)\n        if (onClick) onClick(event)\n        goTo(event.currentTarget.href)\n    }\n\n    const button =\n        internal && to ? (\n            <Link\n                className={clsx(\"button-8p4x\", `${color}-8p4x`, className)}\n                to={withPrefix(to)}\n                download={download}\n                target=\"_self\"\n                onClick={onClickHandler}\n                {...otherProps}\n            >\n                {children}\n            </Link>\n        ) : (\n            <a\n                href={to ?? undefined}\n                className={clsx(\"button-8p4x\", `${color}-8p4x`, className)}\n                download={download}\n                target={download ? \"_self\" : \"_blank\"}\n                ref={ref}\n                rel=\"noreferrer\"\n                {...otherProps}\n            >\n                {children}\n            </a>\n        )\n\n    return <Ripple color={rippleColor}>{button}</Ripple>\n}\n\nexport default LinkButton\n","import clsx from \"clsx\"\nimport \"./Gap.css\"\n\ninterface GapProps extends React.HTMLAttributes<HTMLDivElement> {\n    centered?: boolean | undefined\n}\n\nconst Gap: React.FC<GapProps> = props => {\n    const {className, centered = false, ...otherProps} = props\n\n    return <div className={clsx(\"gap-q2z3\", centered ? \"centered-q2z3\" : \"\", className)} {...otherProps} />\n}\n\nexport default Gap\n","import {documentToHtmlString} from \"@contentful/rich-text-html-renderer\"\nimport clsx from \"clsx\"\nimport React from \"react\"\nimport \"./RichText.css\"\n\nexport interface RichTextFieldProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst RichTextField: React.FC<RichTextFieldProps> = props => {\n    const {children, className, ...otherPros} = props\n\n    if (typeof children !== \"string\") return null\n\n    return (\n        <div\n            className={clsx(\"rich-56aq\", className)}\n            dangerouslySetInnerHTML={children ? {__html: documentToHtmlString(JSON.parse(children))} : undefined}\n            {...otherPros}\n        />\n    )\n}\n\nexport default RichTextField\n","import clsx from \"clsx\"\nimport ChevronDownIcon from \"~/icons/ChevronDownIcon\"\nimport \"./ScrollButton.css\"\n\ninterface ScrollButtonProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst ScrollButton = (props: ScrollButtonProps) => {\n    const {onClick, className, ...otherProps} = props\n    return (\n        <div className={clsx(\"scroller-r94f\", className)} {...otherProps}>\n            <div className=\"mouse-r94f\">\n                <div className=\"scroll-r94f\"></div>\n            </div>\n            <ChevronDownIcon className=\"icon-r94f\" />\n        </div>\n    )\n}\n\nexport default ScrollButton\n","import clsx from \"clsx\"\nimport {forwardRef, useState} from \"react\"\nimport ChevronDownIcon from \"~/icons/ChevronDownIcon\"\nimport \"./Select.css\"\n\ninterface SelectProps extends Omit<React.SelectHTMLAttributes<HTMLSelectElement>, \"placeholder\"> {\n    placeholder?: string | undefined\n    containerProps?: React.HTMLAttributes<HTMLDivElement> | undefined\n    invalid?: boolean\n}\n\nconst Select: React.FC<SelectProps> = forwardRef<HTMLSelectElement, SelectProps>((props, ref): JSX.Element => {\n    const {className, invalid, id, onChange, placeholder = \" - \", containerProps, children, ...otherProps} = props\n    const [selected, setSelected] = useState(\"undefined\")\n\n    const onSelectChangeHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        if (onChange) onChange(event)\n        setSelected(event.currentTarget.value)\n    }\n\n    return (\n        <div\n            className={clsx(\n                \"select-container-fn79\",\n                selected === \"undefined\" ? \"gray-x8np\" : \"\",\n                invalid ? \"invalid-fn79\" : \"\",\n                className,\n            )}\n            {...containerProps}\n        >\n            <select id={id} className=\"select-fn79\" onChange={onSelectChangeHandler} ref={ref} {...otherProps}>\n                <option value=\"undefined\" key=\"-1\">\n                    {placeholder}\n                </option>\n                {children}\n            </select>\n            <div className=\"icon-container-fn79\">\n                <ChevronDownIcon className=\"icon-fn79\" />\n            </div>\n        </div>\n    )\n})\n\nexport default Select\n\ninterface OptionProps extends React.OptionHTMLAttributes<HTMLOptionElement> {\n    children: string\n}\n\nexport const Option: React.FC<OptionProps> = props => {\n    const {children, value, ...otherProps} = props\n    return (\n        <option value={value ? value : children} {...otherProps}>\n            {children}\n        </option>\n    )\n}\n","import clsx from \"clsx\"\nimport {useEffect, useState} from \"react\"\nimport Ripple from \"~/components/UI/Ripple/Ripple\"\nimport \"./Switch.css\"\n\ninterface SwitchProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"select\" | \"onSelect\"> {\n    selected?: boolean | undefined\n    onSelect?: ((event: React.MouseEvent<HTMLButtonElement>) => void) | undefined\n}\n\nconst Switch: React.FC<SwitchProps> = props => {\n    const {className, selected = false, onSelect, children, ...otherProps} = props\n    const [_selected, _setSelected] = useState(selected)\n\n    useEffect(() => {\n        _setSelected(selected)\n    }, [selected])\n\n    const onButtonClickHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n        if (onSelect) onSelect(event)\n    }\n\n    return (\n        <Ripple>\n            <button\n                className={clsx(\"switch-n8h6\", _selected ? \"selected-n8h6\" : \"\", className)}\n                onClick={onButtonClickHandler}\n                {...otherProps}\n            >\n                {children}\n            </button>\n        </Ripple>\n    )\n}\n\nexport default Switch\n","import {graphql, useStaticQuery} from \"gatsby\"\nimport {useContext} from \"react\"\nimport I18nContext from \"~/contexts/I18nContext\"\n\nexport const useAnalysisPostsQuery = () => {\n    const i18n = useContext(I18nContext)\n\n    const data: Queries.AnalysisPostsQuery = useStaticQuery(graphql`\n        query AnalysisPosts {\n            allContentfulContenutoAreaRiservata(filter: {nascosto: {ne: true}, type: {eq: \"analysis\"}}) {\n                nodes {\n                    description_short\n                    id\n                    type\n                    title\n                    slug\n                    node_locale\n                    image {\n                        gatsbyImageData\n                        title\n                    }\n                    pdf {\n                        url\n                        title\n                    }\n                }\n            }\n        }\n    `)\n\n    const localizedData: Array<any> = []\n    for (const post of data.allContentfulContenutoAreaRiservata.nodes) {\n        if (post.node_locale === i18n.language) {\n            localizedData.push(post)\n        }\n    }\n    return localizedData\n}\n","import {graphql, useStaticQuery} from \"gatsby\"\nimport {useContext} from \"react\"\nimport I18nContext from \"~/contexts/I18nContext\"\n\nexport const useAuthenticationLabelsQuery = () => {\n    const i18n = useContext(I18nContext)\n\n    const data: Queries.AuthenticationLabelsQuery = useStaticQuery(graphql`\n        query AuthenticationLabels {\n            allContentfulAuthenticationLabels {\n                nodes {\n                    node_locale\n                    username\n                    password\n                    newPasswordSuccess\n                    name\n                    lastName\n                    email\n                    companyName\n                    companyType\n                    phoneNumber\n                    role\n                    attributesUpdateSuccess\n                    confirmationMessage {\n                        raw\n                    }\n                    passwordChangeMessage {\n                        raw\n                    }\n                    resetMessage {\n                        raw\n                    }\n                    signInMessage {\n                        raw\n                    }\n                    signUpMessage {\n                        raw\n                    }\n                    cognitoErrorMessage {\n                        raw\n                    }\n                    confirmationCode\n                    changePasswordButtonLabel\n                    clickHereLinkLabel\n                    completeRegistrationButtonLabel\n                    confirmButtonLabel\n                    forgottenPasswordQuestion\n                    resendConfirmationCodeLinkLabel\n                    resendConfirmationCodeQuestion\n                    signInButtonLabel\n                    signOutButtonLabel\n                    signUpButtonLabel\n                    validationInvalidConfirmationCode\n                    validationInvalidCredentials\n                    validationInvalidEmail\n                    validationInvalidLastName\n                    validationInvalidName\n                    validationInvalidPassword\n                    validationInvalidPasswordSpecs {\n                        raw\n                    }\n                    validationInvalidPhoneNumber\n                    alreadyHaveAccount\n                    missingAccount\n                    accountRequired {\n                        raw\n                    }\n                    wellcome\n                    cancelButtonLabel\n                    newPassword\n                    oldPassword\n                    resetPasswordButtonLabel\n                    updateFailed\n                    validationInvalidVerificationCode\n                    verificationCode\n                    validationEmailAlreadyUsed\n                    confirmAccountSuccess\n                }\n            }\n            allContentfulAuthenticationLabels2 {\n                nodes {\n                    forgottenPasswordMessage {\n                        raw\n                    }\n                    forgottenPasswordVerificationMessage {\n                        raw\n                    }\n                    node_locale\n                    update\n                    updateAttributesMessage {\n                        raw\n                    }\n                    attributesUpdateSuccess\n                    deleteAccountMessage {\n                        raw\n                    }\n                    deleteAccountButtonLabel\n                    accountDeleteSuccess\n                    updateAttributesButtonLabel\n                    deleteAccount\n                    backToTheHomepage\n                    unkownErrorMessage\n                    privateAreaAccessLinkMessage\n                    privateAreaAccessMessage\n                }\n            }\n        }\n    `)\n\n    let labelsData1 = data.allContentfulAuthenticationLabels.nodes[0]!\n    let labelsData2 = data.allContentfulAuthenticationLabels2.nodes[0]!\n\n    for (const translation of data.allContentfulAuthenticationLabels.nodes) {\n        if (translation.node_locale === i18n.language) {\n            labelsData1 = translation\n            break\n        }\n    }\n\n    for (const translation of data.allContentfulAuthenticationLabels2.nodes) {\n        if (translation.node_locale === i18n.language) {\n            labelsData2 = translation\n            break\n        }\n    }\n\n    const labelsData = {...labelsData1, ...labelsData2}\n\n    return labelsData\n}\n","import {graphql, useStaticQuery} from \"gatsby\"\nimport {useContext} from \"react\"\nimport I18nContext from \"~/contexts/I18nContext\"\n\nexport const useOnDemandPostsQuery = () => {\n    const i18n = useContext(I18nContext)\n\n    const data: Queries.OnDemandPostsQuery = useStaticQuery(graphql`\n        query OnDemandPosts {\n            allContentfulContenutoAreaRiservata(filter: {nascosto: {ne: true}, type: {eq: \"on-demand\"}}) {\n                nodes {\n                    description_short\n                    id\n                    type\n                    title\n                    slug\n                    node_locale\n                    image {\n                        gatsbyImageData\n                        title\n                    }\n                    pdf {\n                        url\n                        title\n                    }\n                }\n            }\n        }\n    `)\n\n    const localizedData: Array<any> = []\n    for (const post of data.allContentfulContenutoAreaRiservata.nodes) {\n        if (post.node_locale === i18n.language) {\n            localizedData.push(post)\n        }\n    }\n    return localizedData\n}\n","import {graphql, useStaticQuery} from \"gatsby\"\nimport {useContext} from \"react\"\nimport I18nContext from \"~/contexts/I18nContext\"\n\nexport const usePodcastPostsQuery = () => {\n    const i18n = useContext(I18nContext)\n\n    const data: Queries.PodcastPostsQuery = useStaticQuery(graphql`\n        query PodcastPosts {\n            allContentfulContenutoAreaRiservata(filter: {nascosto: {ne: true}, type: {eq: \"podcast\"}}) {\n                nodes {\n                    description_short\n                    id\n                    type\n                    title\n                    slug\n                    node_locale\n                    image {\n                        gatsbyImageData\n                        title\n                    }\n                    pdf {\n                        url\n                        title\n                    }\n                }\n            }\n        }\n    `)\n\n    const localizedData = []\n    for (const post of data.allContentfulContenutoAreaRiservata.nodes) {\n        if (post.node_locale === i18n.language) {\n            localizedData.push(post)\n        }\n    }\n    return localizedData\n}\n","import {graphql, useStaticQuery} from \"gatsby\"\nimport {useContext} from \"react\"\nimport I18nContext from \"~/contexts/I18nContext\"\n\nexport const useVideoPostsQuery = () => {\n    const i18n = useContext(I18nContext)\n\n    const data: Queries.VideoPostsQuery = useStaticQuery(graphql`\n        query VideoPosts {\n            allContentfulContenutoAreaRiservata(filter: {nascosto: {ne: true}, type: {eq: \"video\"}}) {\n                nodes {\n                    description_short\n                    id\n                    type\n                    title\n                    slug\n                    node_locale\n                    image {\n                        gatsbyImageData\n                        title\n                    }\n                    pdf {\n                        url\n                        title\n                    }\n                }\n            }\n        }\n    `)\n\n    const localizedData = []\n    for (const post of data.allContentfulContenutoAreaRiservata.nodes) {\n        if (post.node_locale === i18n.language) {\n            localizedData.push(post)\n        }\n    }\n    return localizedData\n}\n","import {HeadFC, PageProps} from \"gatsby\"\nimport {Fragment, useContext, useEffect, useRef, useState} from \"react\"\nimport Blank from \"~/components/Sections/Blank/Blank\"\nimport HeroSection from \"~/components/Sections/HeroSection/HeroSection\"\nimport Search from \"~/components/Sections/Search/Search\"\nimport Post from \"~/components/Sections/Shelf/Post\"\nimport Shelf, {ShelfSortCategories} from \"~/components/Sections/Shelf/Shelf\"\nimport Button from \"~/components/UI/Button/Button\"\nimport Gap from \"~/components/UI/Gap/Gap\"\nimport GenericLink from \"~/components/UI/GenericLink/GenericLink\"\nimport InputText from \"~/components/UI/InputText/InputText\"\nimport MultiStyleText from \"~/components/UI/MultiStyleText/MultiStyleText\"\nimport RichTextField from \"~/components/UI/RichText/RichText\"\nimport ScrollButton from \"~/components/UI/ScrollButton/ScrollButton\"\nimport SectionContainer from \"~/components/UI/SectionContainer/SectionContainer\"\nimport Switch from \"~/components/UI/Switch/Switch\"\nimport AuthContext from \"~/contexts/AuthContext\"\nimport {useAnalysisPostsQuery} from \"~/queries/AnalysisPostsQuery\"\nimport {useAuthenticationLabelsQuery} from \"~/queries/AuthenticationLabelsQuery\"\nimport {useLabelsQuery} from \"~/queries/LabelsQuery\"\nimport {useLinksQuery} from \"~/queries/LinksQuery\"\nimport {useOnDemandPostsQuery} from \"~/queries/OnDemandPostsQuery\"\nimport {usePodcastPostsQuery} from \"~/queries/PodcastPostsQuery\"\nimport {useVideoPostsQuery} from \"~/queries/VideoPostsQuery\"\nimport {PostItem, PostTypes} from \"~/types/PostItem\"\nimport {getQueryParam, setQueryParams} from \"~/utilities/queryParams\"\nimport {SEO} from \"../components/UI/SEO/SEO\"\nimport {PageContext} from \"../types/PageContext\"\n\ntype PrivateAreaPageContext = PageContext<\n    Queries.PrivateAreaPageQuery[\"allContentfulPaginaAreaRiservata\"][\"edges\"][0][\"node\"]\n>\n\ninterface PrivateAreaPageProps extends PageProps<any, PrivateAreaPageContext> {}\n\nexport const PrivateAreaSectionParam = \"section\"\nexport const PrivateAreaSearchParam = \"search\"\nexport const PrivateAreaSortParam = \"sort\"\n\nexport enum PrivateAreaSectionIndex {\n    index = 0,\n    analysis = 1,\n    video = 2,\n    onDemand = 3,\n    podcast = 4,\n}\n\nconst PrivateAreaPage: React.FC<PrivateAreaPageProps> = props => {\n    const privateAreaPageData = props.pageContext.data\n    const links = useLinksQuery()\n\n    const getFilteredItems = () => {\n        const posts: Array<PostItem> = []\n        allPosts.forEach(post => {\n            if (selectedSectionName !== PostTypes.all && post.type !== selectedSectionName) return\n            if (inputTextValue !== \"\") {\n                let foundInTitle = false\n                let foundInDescription = false\n                let foundInCategory = false\n                let foundInCustomer = false\n                let foundInProject = false\n                let foundInTags = false\n\n                const lowCaseValueToFind = inputTextValue.toLowerCase()\n                if (post.title && post.title.toLowerCase().indexOf(lowCaseValueToFind) > -1) foundInTitle = true\n                if (post.description_short && post.description_short.toLowerCase().indexOf(lowCaseValueToFind) > -1)\n                    foundInDescription = true\n                if (post.category && post.category.toLowerCase().indexOf(lowCaseValueToFind) > -1)\n                    foundInCategory = true\n                if (post.customer && post.customer.toLowerCase().indexOf(lowCaseValueToFind) > -1)\n                    foundInCustomer = true\n                if (post.project && post.project.toLowerCase().indexOf(lowCaseValueToFind) > -1) foundInProject = true\n                if (post.tags) {\n                    post.tags.forEach(tag => {\n                        if (tag && tag.toLowerCase().indexOf(lowCaseValueToFind) > -1) foundInTags = true\n                    })\n                }\n\n                if (\n                    !foundInTitle &&\n                    !foundInCategory &&\n                    !foundInDescription &&\n                    !foundInTags &&\n                    !foundInCustomer &&\n                    !foundInProject\n                )\n                    return\n            }\n\n            posts.push(post)\n        })\n        return posts\n    }\n\n    const asyncFIlterItems = async () => {\n        return getFilteredItems()\n    }\n\n    const allPosts: Array<PostItem> = [\n        ...useAnalysisPostsQuery(),\n        ...usePodcastPostsQuery(),\n        ...useOnDemandPostsQuery(),\n        ...useVideoPostsQuery(),\n    ]\n\n    const labels = {...useLabelsQuery(), ...useAuthenticationLabelsQuery()}\n    const sectionParam = getQueryParam(PrivateAreaSectionParam)\n    const searchParam = getQueryParam(PrivateAreaSearchParam)\n    const sortParam = getQueryParam(PrivateAreaSortParam)\n\n    const [selectedSectionIndex, setSelectedSectionIndex] = useState<PrivateAreaSectionIndex | number>(\n        sectionNameToIndex(sectionParam),\n    )\n\n    const [selectedSectionName, setSelectedSectionName] = useState<PostTypes | string>(sectionParam ? sectionParam : \"\")\n\n    const [selectedSort, setSelectedSort] = useState<ShelfSortCategories | string>(sortParam ? sortParam : \"\")\n    const [inputTextValue, setInputTextValue] = useState(searchParam ? searchParam : \"\")\n    const [shelfItems, setShelfItems] = useState<Array<PostItem>>(getFilteredItems())\n    const [isLoading, setLoading] = useState<boolean>(false)\n    const authContext = useContext(AuthContext)\n    const searchRef = useRef<HTMLElement | null>(null)\n\n    useEffect(() => {\n        if (!sectionParam) return\n        setSelectedSectionName(sectionParam)\n        setSelectedSectionIndex(sectionNameToIndex(sectionParam))\n    }, [sectionParam])\n\n    useEffect(() => {\n        updateShelf()\n    }, [selectedSectionName, selectedSort])\n\n    const onSwitchClickHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const selectedType = Number(event.currentTarget.value)\n        setSelectedSectionIndex(selectedType)\n        setSelectedSectionName(privateAreaSectionsIndexToName(selectedType))\n    }\n\n    const onInputChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInputTextValue(event.currentTarget.value)\n    }\n\n    const onSortChange = (value: ShelfSortCategories | string) => {\n        setSelectedSort(value)\n    }\n\n    const updateShelf = () => {\n        updateUrl()\n        setLoading(true)\n        asyncFIlterItems()\n            .then(posts => {\n                setShelfItems(posts)\n            })\n            .then(() => {\n                setLoading(false)\n            })\n    }\n\n    const onFormSubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        updateShelf()\n    }\n\n    const updateUrl = () => {\n        setQueryParams(\n            {name: PrivateAreaSectionParam, value: selectedSectionName},\n            {name: PrivateAreaSearchParam, value: inputTextValue},\n            {name: PrivateAreaSortParam, value: selectedSort},\n        )\n    }\n\n    return (\n        <Fragment>\n            <HeroSection\n                image={privateAreaPageData?.header?.gatsbyImageData}\n                imageAlt={privateAreaPageData?.header?.title}\n                mobileImage={privateAreaPageData?.headerMobile?.gatsbyImageData}\n            >\n                <MultiStyleText flex className1=\"hero-title-part-1-d2bh\" className2=\"hero-title-part-2-d2bh\">\n                    {privateAreaPageData?.titolo}\n                </MultiStyleText>\n            </HeroSection>\n            {authContext.status === \"SIGNED_IN\" && (\n                <Fragment>\n                    <SectionContainer\n                        tabbed\n                        marginPost\n                        customTab={<ScrollButton />}\n                        ref={searchRef}\n                        className=\"search-background-k5ec\"\n                    >\n                        <Search title={privateAreaPageData?.titolo}>\n                            <Gap centered style={{marginTop: \"var(--gutter-4)\"}}>\n                                <Switch\n                                    key={labels.all}\n                                    selected={selectedSectionIndex === PrivateAreaSectionIndex.index}\n                                    onSelect={onSwitchClickHandler}\n                                    value={PrivateAreaSectionIndex.index}\n                                >\n                                    {labels.all}\n                                </Switch>\n                                {privateAreaPageData?.filtri?.map((section, index) => {\n                                    return (\n                                        <Switch\n                                            key={section?.slug}\n                                            selected={selectedSectionIndex === index + 1}\n                                            onSelect={onSwitchClickHandler}\n                                            value={index + 1}\n                                        >\n                                            {section?.titolo}\n                                        </Switch>\n                                    )\n                                })}\n                            </Gap>\n                            <form onSubmit={onFormSubmitHandler}>\n                                <Gap centered>\n                                    <InputText\n                                        {...(labels.searchInputPlaceholder\n                                            ? {placeholder: labels.searchInputPlaceholder}\n                                            : {})}\n                                        onChange={onInputChangeValue}\n                                        value={inputTextValue}\n                                        style={{\n                                            width: \"min(30vw,500px)\",\n                                            minWidth: \"240px\",\n                                            fontStyle: \"italic\",\n                                        }}\n                                    />\n                                    <Button color=\"green\" type=\"submit\">\n                                        {labels.search}\n                                    </Button>\n                                </Gap>\n                            </form>\n                        </Search>\n                    </SectionContainer>\n                    <SectionContainer>\n                        <Shelf\n                            withShowMore\n                            withSorting\n                            loading={isLoading}\n                            sortyBy={sortParam}\n                            onSortSelect={onSortChange}\n                        >\n                            {shelfItems.map((item, index) => {\n                                return (\n                                    <Post\n                                        key={index}\n                                        date={item.date}\n                                        title={item.title}\n                                        image={item.image}\n                                        category={item.category}\n                                        tags={item.tags}\n                                        description_short={item.description_short}\n                                        slug={item.slug}\n                                        type={item.type}\n                                        customer={item.customer}\n                                        project={item.project}\n                                        pdf={item.pdf}\n                                    />\n                                )\n                            })}\n                        </Shelf>\n                    </SectionContainer>\n                </Fragment>\n            )}\n            {authContext.status !== \"SIGNED_IN\" && (\n                <Fragment>\n                    <SectionContainer tabbed marginPost customTab={<ScrollButton />}>\n                        <Blank>\n                            <RichTextField>{labels.accountRequired?.raw}</RichTextField>\n                        </Blank>\n                        <div className=\"switch-container-8hxd\">\n                            <span className=\"switch-label-8hxd\">\n                                {`${labels.missingAccount} `}\n                                <GenericLink\n                                    onClick={() => authContext.setStatus(\"SIGN_UP\")}\n                                    to={links.authentication.url}\n                                >\n                                    {labels.clickHereLinkLabel}\n                                </GenericLink>\n                            </span>\n                        </div>\n                    </SectionContainer>\n                </Fragment>\n            )}\n        </Fragment>\n    )\n}\nexport default PrivateAreaPage\n\n// const getSections = (privateAreaPageContext: Queries.PrivateAreaPageQuery): Array<PrivateAreaSectionContent> => {\n//     const data = privateAreaPageContext.allContentfulPaginaAreaRiservata.edges[0]?.node\n//     const sections: Array<PrivateAreaSectionContent> = []\n\n//     const index: PrivateAreaSectionContent = {\n//         title: data?.titolo,\n//         image: data?.header?.gatsbyImageData,\n//         mobileImage: data?.headerMobile?.gatsbyImageData,\n//         imageAlt: data?.headerMobile?.title,\n//         slug: data?.slug,\n//     }\n//     sections.push(index)\n//     return sections\n// }\n\nexport const sectionNameToIndex = (value: string | undefined | null): number => {\n    switch (value) {\n        case PostTypes.analysis:\n            return PrivateAreaSectionIndex.analysis\n        case PostTypes.onDemand:\n            return PrivateAreaSectionIndex.onDemand\n        case PostTypes.video:\n            return PrivateAreaSectionIndex.video\n        case PostTypes.podcast:\n            return PrivateAreaSectionIndex.podcast\n        default:\n            return PrivateAreaSectionIndex.index\n    }\n}\nexport const privateAreaSectionsIndexToName = (value: number | undefined | null): string => {\n    switch (value) {\n        case PrivateAreaSectionIndex.analysis:\n            return PostTypes.analysis\n        case PrivateAreaSectionIndex.onDemand:\n            return PostTypes.onDemand\n        case PrivateAreaSectionIndex.video:\n            return PostTypes.video\n        case PrivateAreaSectionIndex.podcast:\n            return PostTypes.podcast\n        default:\n            return PostTypes.all\n    }\n}\n\nexport const Head: HeadFC<any, PrivateAreaPageContext> = props => {\n    const privateAreaPageData = props.pageContext.data\n\n    const links = useLinksQuery()\n\n    return (\n        <SEO\n            title={privateAreaPageData.titolo}\n            language={props.pageContext.language}\n            image={privateAreaPageData.header?.url}\n            imageAlt={privateAreaPageData.header?.title}\n            siteUrl={`${process.env.SITE_URL}${links.privateArea.url}`}\n        />\n    )\n}\n","import {useLocation} from \"@gatsbyjs/reach-router\"\n\nexport const getQueryParam = (paramName: string) => {\n    const search = new URLSearchParams(useLocation().search)\n    return search.get(paramName)\n}\n\nexport const setQueryParams = (...urlParams: Array<URLParam | undefined>) => {\n    const url = generateQueryParams(...urlParams)\n    if (url.length > 0) {\n        history.replaceState(null, \"\", `?${url}`)\n    } else {\n        history.replaceState(null, \"\", location.pathname)\n    }\n}\n\nexport const generateQueryParams = (...urlParams: Array<URLParam | undefined>): string => {\n    const queryStrings: Array<string> = []\n    urlParams.forEach(urlParam => {\n        if (!urlParam || !urlParam.name || !urlParam.value) return\n        queryStrings.push(`${urlParam.name}=${urlParam.value}`)\n    })\n    const url = queryStrings.join(\"&\")\n    return url\n}\n\nexport interface URLParam {\n    name: string | undefined\n    value: string | undefined\n}\n","export const onTrasitionEnd = (element: HTMLElement | undefined | null, callback: Function) => {\r\n    if (!element) return\r\n    const handleTransitionEnd = (ev: TransitionEvent) => {\r\n        if (ev.target === element) {\r\n            element.removeEventListener(\"transitionend\", handleTransitionEnd)\r\n        }\r\n        callback()\r\n    }\r\n    element.addEventListener(\"transitionend\", handleTransitionEnd)\r\n}\r\n"],"names":["props","className","children","otherProps","_jsx","clsx","Accordion","titleClassName","iconClassName","date","image","title","category","tags","description_short","pdf","slug","customer","project","type","labels","useLabelsQuery","i18n","useContext","I18nContext","formattedDate","Intl","DateTimeFormat","language","day","month","year","format","Date","postStyle","PostTypes","blog","caseHistory","academy","events","analysis","video","onDemand","podcast","_jsxs","GenericLink","to","url","gatsbyImageData","GatsbyImage","alt","tag","join","LinkButton","read","download","downloadPdf","loading","label","withSorting","withShowMore","sortyBy","sort","onSortSelect","show","showing","setShowing","useState","sortBy","setSortBy","ShelfSortCategories","DateC","items","setItems","isLoading","setLoading","timeoutRef","useRef","updateItems","async","itemsToShow","Children","toArray","CategoryC","a","b","localeCompare","CategoryD","CustomerC","CustomerD","DateD","TitleC","TitleD","TypeC","TypeD","slice","useEffect","then","result","current","setTimeout","clearTimeout","htmlFor","ascending","descending","Select","id","value","onChange","event","currentTarget","Option","Fragment","length","noMatchingResult","count","Button","onClick","state","color","ChevronDownIcon","showMore","defaultStyle","overflow","transitionDuration","transitionTimingFunction","closed","_closed","as","Component","style","drawerRef","isClosed","setClosed","transitionStyle","setTransitionStyle","display","collapse","useCallback","_drawerRef$current","height","scrollHeight","onTrasitionEnd","expand","ref","startClosed","e","ChevronUpIcon","Drawer","withoutTransition","internal","test","transitionContenxt","TransitionContext","navbarContext","NavBarContext","rippleColor","button","Link","withPrefix","target","preventDefault","hide","href","navigate","navigateTo","undefined","rel","Ripple","centered","otherPros","dangerouslySetInnerHTML","__html","documentToHtmlString","JSON","parse","forwardRef","invalid","placeholder","containerProps","selected","setSelected","onSelect","_selected","_setSelected","useAnalysisPostsQuery","data","useStaticQuery","localizedData","post","allContentfulContenutoAreaRiservata","nodes","node_locale","push","useAuthenticationLabelsQuery","labelsData1","allContentfulAuthenticationLabels","labelsData2","allContentfulAuthenticationLabels2","translation","useOnDemandPostsQuery","usePodcastPostsQuery","useVideoPostsQuery","PrivateAreaSectionParam","PrivateAreaSearchParam","PrivateAreaSortParam","PrivateAreaSectionIndex","_privateAreaPageData$","_privateAreaPageData$2","_privateAreaPageData$3","_privateAreaPageData$4","_labels$accountRequir","privateAreaPageData","pageContext","links","useLinksQuery","getFilteredItems","posts","allPosts","forEach","selectedSectionName","all","inputTextValue","foundInTitle","foundInDescription","foundInCategory","foundInCustomer","foundInProject","foundInTags","lowCaseValueToFind","toLowerCase","indexOf","concat","_toConsumableArray","sectionParam","getQueryParam","searchParam","sortParam","selectedSectionIndex","setSelectedSectionIndex","sectionNameToIndex","setSelectedSectionName","selectedSort","setSelectedSort","setInputTextValue","shelfItems","setShelfItems","authContext","AuthContext","searchRef","updateShelf","onSwitchClickHandler","selectedType","Number","privateAreaSectionsIndexToName","updateUrl","asyncFIlterItems","setQueryParams","name","HeroSection","header","imageAlt","mobileImage","headerMobile","MultiStyleText","flex","className1","className2","titolo","status","SectionContainer","tabbed","marginPost","customTab","ScrollButton","Search","Gap","marginTop","Switch","index","filtri","map","section","onSubmit","InputText","searchInputPlaceholder","width","minWidth","fontStyle","search","Shelf","item","Post","Blank","RichTextField","accountRequired","raw","missingAccount","setStatus","authentication","clickHereLinkLabel","Head","_privateAreaPageData$5","_privateAreaPageData$6","SEO","siteUrl","privateArea","paramName","URLSearchParams","useLocation","get","generateQueryParams","apply","arguments","history","replaceState","location","pathname","queryStrings","_len","urlParams","Array","_key","urlParam","element","callback","handleTransitionEnd","ev","removeEventListener","addEventListener"],"sourceRoot":""}