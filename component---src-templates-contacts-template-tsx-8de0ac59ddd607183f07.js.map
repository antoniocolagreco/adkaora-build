{"version":3,"file":"component---src-templates-contacts-template-tsx-8de0ac59ddd607183f07.js","mappings":"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","sources":["webpack://adkaora.com/./src/components/Sections/Blank/Blank.tsx","webpack://adkaora.com/./src/icons/FileUploadIcon.tsx","webpack://adkaora.com/./src/components/UI/FileUpload/FileUpload.tsx","webpack://adkaora.com/./src/components/UI/RichText/RichText.tsx","webpack://adkaora.com/./src/components/UI/ScrollButton/ScrollButton.tsx","webpack://adkaora.com/./src/components/UI/TextArea/TextArea.tsx","webpack://adkaora.com/./src/queries/AuthenticationLabelsQuery.tsx","webpack://adkaora.com/./src/components/UI/Radio/Radio.tsx","webpack://adkaora.com/./src/components/UI/Radio/RadioGroup.tsx","webpack://adkaora.com/./src/components/Forms/ContactUsFullForm.tsx","webpack://adkaora.com/./src/templates/ContactsTemplate.tsx","webpack://adkaora.com/./src/utilities/getTextFromHTML.ts"],"sourcesContent":["import clsx from \"clsx\"\nimport React from \"react\"\nimport \"./Blank.css\"\n\ninterface BlankProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst Blank: React.FC<BlankProps> = props => {\n    const {className, children, ...otherProps} = props\n\n    return (\n        <div className={clsx(\"blank-x5d9\", className)} {...otherProps}>\n            {children}\n        </div>\n    )\n}\n\nexport default Blank\n","const FileUploadIcon: React.FC<React.SVGProps<SVGSVGElement>> = props => {\n    const {viewBox, fill, stroke, ...otherProps} = props\n    return (\n        <svg fill={fill ? fill : \"currentColor\"} viewBox={viewBox ? viewBox : \"0 0 24 24 \"} {...otherProps}>\n            <path d=\"M18,15v3H6v-3H4v3c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2v-3H18z M7,9l1.41,1.41L11,7.83V16h2V7.83l2.59,2.58L17,9l-5-5L7,9z\" />\n        </svg>\n    )\n}\n\nexport default FileUploadIcon\n","import clsx from \"clsx\"\nimport {forwardRef, useImperativeHandle, useRef, useState} from \"react\"\nimport FileUploadIcon from \"~/icons/FileUploadIcon\"\nimport \"./FileUpload.css\"\n\ninterface FileUploadProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"placeholder\"> {\n    id: string\n    invalid?: boolean\n    placeholder?: string | undefined | null\n    containerProps?: React.HTMLAttributes<HTMLDivElement> | undefined\n}\n\nconst FileUpload: React.FC<FileUploadProps> = forwardRef<HTMLInputElement, FileUploadProps>((props, ref) => {\n    const {className, id, invalid, placeholder, onChange, containerProps, children, ...otherProps} = props\n    const [label, setLabel] = useState(placeholder)\n    const [loaded, setLoaded] = useState(false)\n    const innerRef = useRef<HTMLInputElement | null>(null)\n    useImperativeHandle(ref, () => innerRef.current!, [innerRef])\n\n    const onInputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (onChange) onChange(event)\n        if (!event.currentTarget.files || event.currentTarget.files.length < 1) {\n            setLabel(placeholder)\n            setLoaded(false)\n            return\n        }\n        const filename = event.currentTarget.files[0]?.name\n        setLabel(filename)\n        setLoaded(true)\n    }\n\n    const onLabelKeyDownHandler = (event: React.KeyboardEvent<HTMLLabelElement>) => {\n        switch (event.key) {\n            case \"Enter\":\n                event.preventDefault()\n                innerRef.current?.click()\n                break\n            case \" \":\n                event.preventDefault()\n                innerRef.current?.click()\n                break\n        }\n    }\n\n    return (\n        <div\n            className={clsx(\n                \"file-upload-container-x8np\",\n                loaded ? \"\" : \"gray-x8np\",\n                invalid ? \"invalid-x8np\" : \"\",\n                className,\n            )}\n            {...containerProps}\n        >\n            <label className=\"label-x8np\" htmlFor={id} tabIndex={0} onKeyDown={onLabelKeyDownHandler}>\n                {label}\n            </label>\n            <input\n                id={id}\n                className=\"file-upload-x8np\"\n                type=\"file\"\n                ref={innerRef}\n                {...otherProps}\n                onChange={onInputChangeHandler}\n            />\n            <div className=\"icon-container-x8np\">\n                <FileUploadIcon className=\"icon-x8np\" />\n            </div>\n        </div>\n    )\n})\n\nexport default FileUpload\n","import {documentToHtmlString} from \"@contentful/rich-text-html-renderer\"\nimport clsx from \"clsx\"\nimport React from \"react\"\nimport \"./RichText.css\"\n\nexport interface RichTextFieldProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst RichTextField: React.FC<RichTextFieldProps> = props => {\n    const {children, className, ...otherPros} = props\n\n    if (typeof children !== \"string\") return null\n\n    return (\n        <div\n            className={clsx(\"rich-56aq\", className)}\n            dangerouslySetInnerHTML={children ? {__html: documentToHtmlString(JSON.parse(children))} : undefined}\n            {...otherPros}\n        />\n    )\n}\n\nexport default RichTextField\n","import clsx from \"clsx\"\nimport ChevronDownIcon from \"~/icons/ChevronDownIcon\"\nimport \"./ScrollButton.css\"\n\ninterface ScrollButtonProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst ScrollButton = (props: ScrollButtonProps) => {\n    const {onClick, className, ...otherProps} = props\n    return (\n        <div className={clsx(\"scroller-r94f\", className)} {...otherProps}>\n            <div className=\"mouse-r94f\">\n                <div className=\"scroll-r94f\"></div>\n            </div>\n            <ChevronDownIcon className=\"icon-r94f\" />\n        </div>\n    )\n}\n\nexport default ScrollButton\n","import clsx from \"clsx\"\nimport {forwardRef} from \"react\"\nimport \"./TextArea.css\"\n\ninterface TextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, \"placeholder\"> {\n    placeholder: string | undefined | null\n    invalid?: boolean\n}\n\nconst TextArea: React.FC<TextAreaProps> = forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => {\n    const {className, children, placeholder, invalid, ...otherProps} = props\n    return (\n        <textarea\n            ref={ref}\n            className={clsx(\"textarea-7t3r\", invalid ? \"invalid-7t3r\" : \"\", className)}\n            placeholder={placeholder ? placeholder : \"\"}\n            {...otherProps}\n        />\n    )\n})\n\nexport default TextArea\n","import {graphql, useStaticQuery} from \"gatsby\"\nimport {useContext} from \"react\"\nimport I18nContext from \"~/contexts/I18nContext\"\n\nexport const useAuthenticationLabelsQuery = () => {\n    const i18n = useContext(I18nContext)\n\n    const data: Queries.AuthenticationLabelsQuery = useStaticQuery(graphql`\n        query AuthenticationLabels {\n            allContentfulAuthenticationLabels {\n                nodes {\n                    node_locale\n                    username\n                    password\n                    newPasswordSuccess\n                    name\n                    lastName\n                    email\n                    companyName\n                    companyType\n                    phoneNumber\n                    role\n                    attributesUpdateSuccess\n                    confirmationMessage {\n                        raw\n                    }\n                    passwordChangeMessage {\n                        raw\n                    }\n                    resetMessage {\n                        raw\n                    }\n                    signInMessage {\n                        raw\n                    }\n                    signUpMessage {\n                        raw\n                    }\n                    cognitoErrorMessage {\n                        raw\n                    }\n                    confirmationCode\n                    changePasswordButtonLabel\n                    clickHereLinkLabel\n                    completeRegistrationButtonLabel\n                    confirmButtonLabel\n                    forgottenPasswordQuestion\n                    resendConfirmationCodeLinkLabel\n                    resendConfirmationCodeQuestion\n                    signInButtonLabel\n                    signOutButtonLabel\n                    signUpButtonLabel\n                    validationInvalidConfirmationCode\n                    validationInvalidCredentials\n                    validationInvalidEmail\n                    validationInvalidLastName\n                    validationInvalidName\n                    validationInvalidPassword\n                    validationInvalidPasswordSpecs {\n                        raw\n                    }\n                    validationInvalidPhoneNumber\n                    alreadyHaveAccount\n                    missingAccount\n                    accountRequired {\n                        raw\n                    }\n                    wellcome\n                    cancelButtonLabel\n                    newPassword\n                    oldPassword\n                    resetPasswordButtonLabel\n                    updateFailed\n                    validationInvalidVerificationCode\n                    verificationCode\n                    validationEmailAlreadyUsed\n                    confirmAccountSuccess\n                }\n            }\n            allContentfulAuthenticationLabels2 {\n                nodes {\n                    forgottenPasswordMessage {\n                        raw\n                    }\n                    forgottenPasswordVerificationMessage {\n                        raw\n                    }\n                    node_locale\n                    update\n                    updateAttributesMessage {\n                        raw\n                    }\n                    attributesUpdateSuccess\n                    deleteAccountMessage {\n                        raw\n                    }\n                    deleteAccountButtonLabel\n                    accountDeleteSuccess\n                    updateAttributesButtonLabel\n                    deleteAccount\n                    backToTheHomepage\n                    unkownErrorMessage\n                    privateAreaAccessLinkMessage\n                    privateAreaAccessMessage\n                }\n            }\n        }\n    `)\n\n    let labelsData1 = data.allContentfulAuthenticationLabels.nodes[0]!\n    let labelsData2 = data.allContentfulAuthenticationLabels2.nodes[0]!\n\n    for (const translation of data.allContentfulAuthenticationLabels.nodes) {\n        if (translation.node_locale === i18n.language) {\n            labelsData1 = translation\n            break\n        }\n    }\n\n    for (const translation of data.allContentfulAuthenticationLabels2.nodes) {\n        if (translation.node_locale === i18n.language) {\n            labelsData2 = translation\n            break\n        }\n    }\n\n    const labelsData = {...labelsData1, ...labelsData2}\n\n    return labelsData\n}\n","import clsx from \"clsx\"\nimport {forwardRef} from \"react\"\nimport \"./Radio.css\"\n\nexport interface RadioProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"onSelect\" | \"value\"> {\n    label: string | undefined | null\n    invalid?: boolean | undefined\n    containerProps?: React.HTMLAttributes<HTMLSpanElement> | undefined\n    selected?: boolean | undefined\n    onSelect?: ((value: string) => void) | undefined\n    value: string\n}\n\nconst Radio: React.FC<RadioProps> = forwardRef<HTMLInputElement, RadioProps>((props, ref) => {\n    const {className, selected, onSelect, containerProps, value, label, invalid, children, onClick, ...otherProps} =\n        props\n\n    const onClickHandler = (event: React.MouseEvent<HTMLInputElement>) => {\n        if (onClick) onClick(event)\n        if (onSelect) onSelect(value)\n    }\n\n    return (\n        <span className={clsx(\"radio-container-eb96\", className)} {...containerProps}>\n            <span className={clsx(\"radio-eb96\", selected ? \"selected-eb96\" : \"\", invalid ? \"invalid-eb96\" : \"\")}>\n                <input\n                    className=\"radio-input-eb96\"\n                    type=\"radio\"\n                    ref={ref}\n                    aria-checked={selected}\n                    onClick={onClickHandler}\n                    value={value}\n                    {...otherProps}\n                />\n                <div className=\"check-dot-eb96\" />\n            </span>\n            {label && <span className=\"label-eb96\">{label}</span>}\n        </span>\n    )\n})\n\nexport default Radio\n","import clsx from \"clsx\"\nimport {Children, cloneElement, forwardRef, isValidElement, useState} from \"react\"\nimport Radio, {RadioProps} from \"./Radio\"\nimport \"./RadioGroup.css\"\n\ninterface RadioGroupProps extends React.HTMLAttributes<HTMLDivElement> {\n    label?: string | undefined\n    vertical?: boolean | undefined\n    children?: Array<React.ReactElement<RadioProps>> | React.ReactElement<RadioProps> | undefined\n    invalid?: boolean | undefined\n    name: string\n}\n\nconst RadioGroup: React.FC<RadioGroupProps> = forwardRef<HTMLDivElement, RadioGroupProps>((props, ref) => {\n    const {label, name, invalid, vertical = false, className, children, ...otherProps} = props\n    const [selected, setSelected] = useState<string>(\"\")\n\n    const radioButtons = Children.map(children, child => {\n        if (!isValidElement<RadioProps>(child)) return\n        const radioButton = child as React.ReactElement<RadioProps>\n        if (radioButton.type !== Radio) return\n        const result = cloneElement(radioButton, {\n            invalid: invalid,\n            selected: selected === radioButton.props.value,\n            onSelect: setSelected,\n            name: name,\n        })\n        return result\n    })\n\n    return (\n        <div\n            ref={ref}\n            className={clsx(\n                \"radio-group-w2zx\",\n                invalid ? \"invalid-w2zx\" : \"\",\n                vertical ? \"vertical-w2zx\" : \"\",\n                className,\n            )}\n            {...otherProps}\n        >\n            <span className=\"label-w2zx\">{label}</span>\n            <div className=\"radio-buttons-w2zx\">{radioButtons}</div>\n        </div>\n    )\n})\n\nexport default RadioGroup\n","import clsx from \"clsx\"\nimport {useState} from \"react\"\nimport {SubmitHandler, useForm} from \"react-hook-form\"\nimport Button from \"~/components/UI/Button/Button\"\nimport CheckBox from \"~/components/UI/CheckBox/CheckBox\"\nimport FileUpload from \"~/components/UI/FileUpload/FileUpload\"\nimport InputText from \"~/components/UI/InputText/InputText\"\nimport Radio from \"~/components/UI/Radio/Radio\"\nimport RadioGroup from \"~/components/UI/Radio/RadioGroup\"\nimport TextArea from \"~/components/UI/TextArea/TextArea\"\nimport CheckIcon from \"~/icons/CheckIcon\"\nimport {useLabelsQuery} from \"~/queries/LabelsQuery\"\nimport ErrorIcon from \"../../icons/ErrorIcon\"\nimport {useAuthenticationLabelsQuery} from \"../../queries/AuthenticationLabelsQuery\"\nimport {emailRegex, nameRegex, phoneRegex, textRegex} from \"../../utilities/RegexStrings\"\nimport \"./Form.css\"\n\ninterface ContactUsFullFormProps extends React.FormHTMLAttributes<HTMLFormElement> {}\n\n// Se il nome dei campi è caotico, dipende dalla form.\ntype ContactUsFullFields = {\n    Name_First: string\n    Name_Last: string\n    Email: string\n    SingleLine: string //Company name\n    PhoneNumber_countrycode: string\n    Dropdown: string\n    Dropdown1: string //Tipo\n    FileUpload: File\n    MultiLine: string\n    DecisionBox: \"on\" | \"\"\n    DecisionBox1: \"on\" | \"\"\n    DecisionBox2: \"on\" | \"\"\n}\n\ntype SubmitStatus = undefined | \"success\" | \"error\"\n\nconst ContactUsFullForm: React.FC<ContactUsFullFormProps> = props => {\n    const {className, children, ...otherProps} = props\n    const [submitStatus, setSubmitStatus] = useState<SubmitStatus>()\n\n    const {\n        register,\n        handleSubmit,\n        watch,\n        formState: {errors},\n    } = useForm<ContactUsFullFields>()\n    const labels = {...useLabelsQuery(), ...useAuthenticationLabelsQuery()}\n\n    const onFormSubmitHandler: SubmitHandler<ContactUsFullFields> = async inputData => {\n        const data = {...inputData, PhoneNumber_countrycode: inputData.PhoneNumber_countrycode.replace(\"+\", \"00\")}\n\n        const url =\n            \"https://forms.zohopublic.eu/adkaora/form/AdKaoranewwebsiteLAVORACONNOI/formperma/0UrFrFIFXXh4TlYIYqqlCXQMMRyLHuAazd6AyGFit14/htmlRecords/submit\"\n\n        const formData = new FormData()\n\n        for (const field in data) {\n            type ObjectKey = keyof typeof data\n            const fieldKey = field as ObjectKey\n            if (data[fieldKey] instanceof FileList) {\n                const fl = data[fieldKey] as unknown as FileList\n                if (fl[0]) {\n                    formData.append(field, fl[0], fl[0].name)\n                }\n                continue\n            }\n            if (typeof data[fieldKey] === \"boolean\") {\n                const bool = data[fieldKey] as unknown as boolean\n                if (bool) {\n                    formData.append(field, \"on\")\n                } else {\n                    formData.append(field, \"\")\n                }\n                continue\n            }\n\n            formData.append(field, data[fieldKey])\n        }\n\n        const requestOptions: RequestInit = {\n            method: \"POST\",\n            mode: \"cors\",\n            body: formData,\n            redirect: \"manual\",\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n        }\n\n        await fetch(url, requestOptions)\n            .then(result => {})\n            .catch((error: Error) => {})\n        setSubmitStatus(\"success\")\n    }\n\n    return (\n        <form\n            className={clsx(\"form-ykf9\", \"white-background-ykf9\", className)}\n            onSubmit={handleSubmit(onFormSubmitHandler)}\n            {...otherProps}\n        >\n            <InputText\n                type=\"text\"\n                placeholder={labels.name}\n                invalid={errors.Name_First !== undefined}\n                {...register(\"Name_First\", {required: true, pattern: nameRegex})}\n            />\n            <InputText\n                type=\"text\"\n                placeholder={labels.lastName}\n                invalid={errors.Name_Last !== undefined}\n                {...register(\"Name_Last\", {required: true, pattern: nameRegex})}\n            />\n            <InputText\n                type=\"text\"\n                placeholder={labels.company}\n                invalid={errors.SingleLine !== undefined}\n                {...register(\"SingleLine\", {required: false, pattern: nameRegex})}\n            />\n            <InputText\n                type=\"email\"\n                placeholder={labels.eMail}\n                invalid={errors.Email !== undefined}\n                {...register(\"Email\", {\n                    required: true,\n                    pattern: emailRegex,\n                })}\n            />\n            <div className=\"full-width-ykf9\">\n                <InputText\n                    containerClassName=\"full-width-ykf9 phone-input-ykf9\"\n                    type=\"phone\"\n                    placeholder={labels.phoneNumber}\n                    invalid={errors.PhoneNumber_countrycode !== undefined}\n                    {...register(\"PhoneNumber_countrycode\", {\n                        required: true,\n                        pattern: phoneRegex,\n                    })}\n                />\n                {errors.PhoneNumber_countrycode !== undefined && (\n                    <div className=\"messages-box-pt86\">{labels.validationInvalidPhoneNumber}</div>\n                )}\n            </div>\n            <FileUpload\n                id=\"file\"\n                placeholder={labels.attachedFile}\n                accept=\".pdf,.zip,.rar,.7z\"\n                invalid={errors.FileUpload !== undefined}\n                {...register(\"FileUpload\", {required: false})}\n            />\n            <RadioGroup\n                className=\"span2-ykf9\"\n                label={labels.type ? labels.type : \"\"}\n                invalid={errors.Dropdown1 !== undefined}\n                name=\"Dropdown1\"\n            >\n                <Radio label={labels.advertiser} value={`advertiser`} {...register(\"Dropdown1\", {required: false})} />\n                <Radio label={labels.publisher} value={`publisher`} {...register(\"Dropdown1\", {required: false})} />\n                <Radio label={labels.candidate} value={`cadidate`} {...register(\"Dropdown1\", {required: false})} />\n                <Radio label={labels.other} value={`other`} {...register(\"Dropdown1\", {required: false})} />\n            </RadioGroup>\n            <TextArea\n                placeholder={labels.message}\n                rows={8}\n                className=\"span2-ykf9\"\n                invalid={errors.MultiLine !== undefined}\n                {...register(\"MultiLine\", {required: false, pattern: textRegex})}\n            />\n            <CheckBox\n                label={labels.privacyAcceptance}\n                className=\"span2-ykf9\"\n                invalid={errors.DecisionBox !== undefined}\n                {...register(\"DecisionBox\", {required: true})}\n            />\n            <CheckBox\n                label={labels.userProfiling}\n                className=\"span2-ykf9\"\n                invalid={errors.DecisionBox1 !== undefined}\n                {...register(\"DecisionBox1\", {required: false})}\n            />\n            <CheckBox\n                label={labels.userMarketing}\n                className=\"span2-ykf9\"\n                invalid={errors.DecisionBox2 !== undefined}\n                {...register(\"DecisionBox2\", {required: false})}\n            />\n            <Button className=\"span2-ykf9 button-ykf9\" type=\"submit\">\n                {labels.submitForm}\n            </Button>\n            {submitStatus === \"success\" && (\n                <div className=\"overlay-ykf9\">\n                    <div className=\"modal-ykf9\">\n                        <CheckIcon className=\"check-icon-ykf9\" />\n                        <span className=\"submit-success-message-ykf9\">{labels.submitSuccessMessage}</span>\n                    </div>\n                </div>\n            )}\n            {submitStatus === \"error\" && (\n                <div className=\"overlay-ykf9\">\n                    <div className=\"modal-ykf9\">\n                        <ErrorIcon className=\"error-icon-ykf9\" />\n                        <span className=\"submit-success-message-ykf9\">Error</span>\n                    </div>\n                </div>\n            )}\n        </form>\n    )\n}\n\nexport default ContactUsFullForm\n","import {HeadFC, PageProps} from \"gatsby\"\nimport {Fragment} from \"react\"\nimport ContactUsFullForm from \"~/components/Forms/ContactUsFullForm\"\nimport Blank from \"~/components/Sections/Blank/Blank\"\nimport HeroSection from \"~/components/Sections/HeroSection/HeroSection\"\nimport MultiStyleText from \"~/components/UI/MultiStyleText/MultiStyleText\"\nimport RichTextField from \"~/components/UI/RichText/RichText\"\nimport ScrollButton from \"~/components/UI/ScrollButton/ScrollButton\"\nimport SectionContainer from \"~/components/UI/SectionContainer/SectionContainer\"\nimport {useLinksQuery} from \"~/queries/LinksQuery\"\nimport {SEO} from \"../components/UI/SEO/SEO\"\nimport {PageContext} from \"../types/PageContext\"\nimport getTextFromHTML from \"../utilities/getTextFromHTML\"\n\ntype ContactsPageContext = PageContext<Queries.ContactsPageQuery[\"allContentfulPaginaContatti\"][\"edges\"][0][\"node\"]>\n\ninterface ContactsPageProps extends PageProps<any, ContactsPageContext> {}\n\nconst ContactsPage: React.FC<ContactsPageProps> = props => {\n    const contactsPageData = props.pageContext.data\n\n    return (\n        <Fragment>\n            <HeroSection\n                image={contactsPageData.immagine?.gatsbyImageData}\n                imageAlt={contactsPageData.immagine?.title}\n                mobileImage={contactsPageData.immagineMobile?.gatsbyImageData}\n            >\n                <MultiStyleText flex className1=\"hero-title-part-1-d2bh\" className2=\"hero-title-part-2-d2bh\">\n                    {contactsPageData.titolo}\n                </MultiStyleText>\n            </HeroSection>\n            <SectionContainer tabbed marginPost customTab={<ScrollButton />} withFadeInEffect>\n                <Blank>\n                    <h3 className=\"no-margin\">{contactsPageData.titolo2}</h3>\n                    <RichTextField style={{marginTop: \"var(--gutter-5)\"}} className=\"font-h6 chars-h6-80\">\n                        {contactsPageData.testo?.raw}\n                    </RichTextField>\n                </Blank>\n            </SectionContainer>\n            <SectionContainer>\n                <ContactUsFullForm />\n            </SectionContainer>\n        </Fragment>\n    )\n}\nexport default ContactsPage\n\nexport const Head: HeadFC<any, ContactsPageContext> = props => {\n    const contactsPageData = props.pageContext.data\n\n    const links = useLinksQuery()\n\n    return (\n        <SEO\n            title={contactsPageData.titolo}\n            description={getTextFromHTML(contactsPageData.testo?.raw)}\n            language={props.pageContext.language}\n            image={contactsPageData.immagine?.url}\n            imageAlt={contactsPageData.immagine?.title}\n            siteUrl={`${process.env.SITE_URL}${links.contacts.url}`}\n        />\n    )\n}\n","import {documentToHtmlString} from \"@contentful/rich-text-html-renderer\"\n\nconst getTextFromHTML = (input: string | undefined | null) => {\n    if (!input) return \"\"\n    let result = documentToHtmlString(JSON.parse(input))\n    result = result.replaceAll(/<[^<>]+>/gm, \"\")\n    return result\n}\n\nexport default getTextFromHTML\n"],"names":["props","className","children","otherProps","_jsx","clsx","viewBox","fill","stroke","d","forwardRef","ref","id","invalid","placeholder","onChange","containerProps","label","setLabel","useState","loaded","setLoaded","innerRef","useRef","useImperativeHandle","current","_jsxs","htmlFor","tabIndex","onKeyDown","event","_innerRef$current","_innerRef$current2","key","preventDefault","click","type","_event$currentTarget$","currentTarget","files","length","filename","name","FileUploadIcon","otherPros","dangerouslySetInnerHTML","__html","documentToHtmlString","JSON","parse","undefined","onClick","ChevronDownIcon","TextArea","useAuthenticationLabelsQuery","i18n","useContext","I18nContext","data","useStaticQuery","labelsData1","allContentfulAuthenticationLabels","nodes","labelsData2","allContentfulAuthenticationLabels2","translation","node_locale","language","selected","onSelect","value","vertical","setSelected","radioButtons","Children","map","child","isValidElement","radioButton","Radio","cloneElement","submitStatus","setSubmitStatus","register","handleSubmit","watch","formState","errors","useForm","labels","useLabelsQuery","onSubmit","async","inputData","PhoneNumber_countrycode","replace","formData","FormData","field","fieldKey","FileList","fl","append","requestOptions","method","mode","body","redirect","cache","credentials","fetch","then","result","catch","error","InputText","Name_First","required","pattern","nameRegex","lastName","Name_Last","company","SingleLine","eMail","Email","emailRegex","containerClassName","phoneNumber","phoneRegex","validationInvalidPhoneNumber","FileUpload","attachedFile","accept","RadioGroup","Dropdown1","advertiser","publisher","candidate","other","message","rows","MultiLine","textRegex","CheckBox","privacyAcceptance","DecisionBox","userProfiling","DecisionBox1","userMarketing","DecisionBox2","Button","submitForm","CheckIcon","submitSuccessMessage","ErrorIcon","_contactsPageData$imm","_contactsPageData$imm2","_contactsPageData$imm3","_contactsPageData$tes","contactsPageData","pageContext","Fragment","HeroSection","image","immagine","gatsbyImageData","imageAlt","title","mobileImage","immagineMobile","MultiStyleText","flex","className1","className2","titolo","SectionContainer","tabbed","marginPost","customTab","ScrollButton","withFadeInEffect","Blank","titolo2","RichTextField","style","marginTop","testo","raw","ContactUsFullForm","Head","_contactsPageData$tes2","_contactsPageData$imm4","_contactsPageData$imm5","links","useLinksQuery","SEO","description","getTextFromHTML","url","siteUrl","contacts","input","replaceAll"],"sourceRoot":""}